// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queries.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, email, password, role, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
)
RETURNING id, name, email, password, role, created_at, updated_at
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
	Role     pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
    WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
    SET email = $2,
        updated_at = NOW()
    WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    int64
	Email string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
    SET name = $2,
        updated_at = NOW()
    WHERE id = $1
`

type UpdateUserNameParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.ID, arg.Name)
	return err
}

const updateUserNameEmail = `-- name: UpdateUserNameEmail :exec
UPDATE users
    SET name = $2,
        email = $3,
        updated_at = NOW()
    WHERE id = $1
`

type UpdateUserNameEmailParams struct {
	ID    int64
	Name  string
	Email string
}

func (q *Queries) UpdateUserNameEmail(ctx context.Context, arg UpdateUserNameEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserNameEmail, arg.ID, arg.Name, arg.Email)
	return err
}

const userByID = `-- name: UserByID :one
SELECT id, name, email, password, role, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) UserByID(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, userByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
